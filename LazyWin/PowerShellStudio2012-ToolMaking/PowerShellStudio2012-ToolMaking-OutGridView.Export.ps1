#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: e6b2ce39-60ae-4f17-8b0f-57f56e0615c7
# Source File: PowerShellStudio2012-ToolMaking-OutGridView.pff
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
EBQAAB+LCAAAAAAABADVWF1v2jAUfZ+0/xDlmRJC+GilEImm61StXVFh3d4qk1xar46NHKeQ/vo5
IYGEhBIoRasqofr6Xp9r3+Njx+YdOOwFeHiBBLK+flEU85bjR0wRucQEfiIPrAGbAR8+ASFDEbiY
NRt682TEGLlBz5g+ntwG4jvH7j2GWX06mZhaYYR43Kh1D9zHjFp6vWlqWcMCefwXHKGIcAo9dRj6
Arz6b0xdNvPrl4x7i9+aUtZVU5Kheq16I/qrKXZARMChRyEQHJGaMgjGBDs/IByxZ6C9cbeL2k67
o58ZLWicnqkKlcn21Ikc7xq9hnL8vuth6jBPVZwnTFwuo1SbUcEZ8dU4aZn2gLMpcBEm4TbBQMUQ
v4JqNTvtmtLpmlrqsyEmWiXVKgHeGjmCuVCtbFS9NOzbi0wqiblmyC1Fe4h6TC32TQO3FyVK4ZzN
P7wuQuKM2dxm3jQQwOM1e6MuxbW6Zg4SMhXV0ps1RW8WVmlTYUqQK8QuKKA35JSbjQr+IzS+oi7M
VatVrJ+2qEP1qpwHQjD64UUZxzBD4C/YAf899TBOK9cjD1q5FF25GZvGTpWo5B1vwR2y+eXDPfYD
JPU0JHCOnGebEcZVa8SDUmJlN6+UF+d5fQkeYuvazv2/KSNnKRP39+fMmbEHZ5aoH0maKsKyIM0u
6RyONUvUT0ib4RPi79CZbmsfoYkxP5IxenWZqZrLAUUmhvyEXLE5uDJZjMjefNFPa8rZjnRZwVam
TKe7M2Uq3ShiyuyUz+Fos4LdSp18oy+lyZNlBj/1TSyhldDmBlH0CJ4crd4PBPPiaq3oY1Slj6GP
J8Zpu4Nco9MCo21qS6R1ZM93GCd4fACSvoGymN8xMA6+9bYjRp+YxwHiaCY/TPfBahiT9qQ70XW3
3UAG2o71xyPHmRPmcoMwHqZXvqPMzmYcjjK9ZFbJzeTwc1s2U1UxB1LapIjwNKPvQEEOnBHGhcPy
AWOhWqXWxHjlJC8ZOde8VUoXnoAvpDrGqhUd/QXb0tsOfClvaX9m7E0dA4JE9GFvnURXirSx7L4L
6HDUj86O5L9V4PKRJ32SiW6xBWMq3vnVMofgBBzLQ0RLLfmAwvNPXNXiE1B6IrmBIwrOa/Z1//VC
lVkvwHc4nuYXWSu1Rh/7iIbZNV+32Gwacvz4lCtM0XZFBXCKyFqC5ebSt7PkwNzYJTPzVkdrkquX
PWxz72xahvuSCdkXwH97utD6EBQAAA==#>
#endregion
#========================================================================
# Code Generated By: SAPIEN Technologies, Inc., PowerShell Studio 2012 v3.1.24
# Generated On: 2013-10-11 4:36 PM
# Generated By: Francois-Xavier Cat
# Organization: LazyWinAdmin.com
#========================================================================
#----------------------------------------------
#region Application Functions
#----------------------------------------------

function OnApplicationLoad {
	#Note: This function is not called in Projects
	#Note: This function runs before the form is created
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Windows Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#Important: Form controls cannot be accessed in this function
	#TODO: Add snapins and custom code to validate the application load
	
	return $true #return true for success or false for failure
}

function OnApplicationExit {
	#Note: This function is not called in Projects
	#Note: This function runs after the form is closed
	#TODO: Add custom code to clean up and unload snapins when the application exits
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Call-PowerShellStudio2012-ToolMaking-OutGridView_pff {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formLazyWinAdmincom = New-Object 'System.Windows.Forms.Form'
	$textboxComputerName = New-Object 'System.Windows.Forms.TextBox'
	$buttonServices = New-Object 'System.Windows.Forms.Button'
	$buttonProcesses = New-Object 'System.Windows.Forms.Button'
	$buttonShares = New-Object 'System.Windows.Forms.Button'
	$buttonCredential = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	
	
	
	
	$formLazyWinAdmincom_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	$buttonCredential_Click={
		# Ask for Credential
		$global:cred = Get-Credential -Credential 'FX\Administrator'
	}
	
	$buttonServices_Click={
		# Query the Services on the computername specified in the textbox
		Get-WmiObject Win32_Service -ComputerName $textboxComputerName.Text -Credential $cred | Select-Object __Server,Name | Out-GridView
	}
	
	$buttonProcesses_Click={
		# Query the Processes on the computername specified in the textbox
		Get-WmiObject Win32_Process -ComputerName $textboxComputerName.Text -Credential $cred | Select-Object __Server,Name | Out-GridView
	}
	
	$buttonShares_Click={
		# Query the Shares on the computername specified in the textbox
		Get-WmiObject Win32_Share -ComputerName $textboxComputerName.Text -Credential $cred | Select-Object __Server,Name | Out-GridView
	}
	#region Control Helper Functions
	function Load-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The ComboBox control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the ComboBox's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{	
				$array.Add($Item)	
			}
			$DataGridView.DataSource = $array
		}
		
		$DataGridView.ResumeLayout()
	}
	#endregion
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formLazyWinAdmincom.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonServices.remove_Click($buttonServices_Click)
			$buttonProcesses.remove_Click($buttonProcesses_Click)
			$buttonShares.remove_Click($buttonShares_Click)
			$buttonCredential.remove_Click($buttonCredential_Click)
			$formLazyWinAdmincom.remove_Load($formLazyWinAdmincom_Load)
			$formLazyWinAdmincom.remove_Load($Form_StateCorrection_Load)
			$formLazyWinAdmincom.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	#
	# formLazyWinAdmincom
	#
	$formLazyWinAdmincom.Controls.Add($textboxComputerName)
	$formLazyWinAdmincom.Controls.Add($buttonServices)
	$formLazyWinAdmincom.Controls.Add($buttonProcesses)
	$formLazyWinAdmincom.Controls.Add($buttonShares)
	$formLazyWinAdmincom.Controls.Add($buttonCredential)
	$formLazyWinAdmincom.ClientSize = '265, 67'
	$formLazyWinAdmincom.Name = "formLazyWinAdmincom"
	$formLazyWinAdmincom.Text = "LazyWinAdmin.com"
	$formLazyWinAdmincom.add_Load($formLazyWinAdmincom_Load)
	#
	# textboxComputerName
	#
	$textboxComputerName.Location = '12, 12'
	$textboxComputerName.Name = "textboxComputerName"
	$textboxComputerName.Size = '100, 20'
	$textboxComputerName.TabIndex = 4
	#
	# buttonServices
	#
	$buttonServices.Location = '12, 38'
	$buttonServices.Name = "buttonServices"
	$buttonServices.Size = '75, 23'
	$buttonServices.TabIndex = 3
	$buttonServices.Text = "Services"
	$buttonServices.UseVisualStyleBackColor = $True
	$buttonServices.add_Click($buttonServices_Click)
	#
	# buttonProcesses
	#
	$buttonProcesses.Location = '93, 38'
	$buttonProcesses.Name = "buttonProcesses"
	$buttonProcesses.Size = '75, 23'
	$buttonProcesses.TabIndex = 2
	$buttonProcesses.Text = "Processes"
	$buttonProcesses.UseVisualStyleBackColor = $True
	$buttonProcesses.add_Click($buttonProcesses_Click)
	#
	# buttonShares
	#
	$buttonShares.Location = '174, 38'
	$buttonShares.Name = "buttonShares"
	$buttonShares.Size = '75, 23'
	$buttonShares.TabIndex = 1
	$buttonShares.Text = "Shares"
	$buttonShares.UseVisualStyleBackColor = $True
	$buttonShares.add_Click($buttonShares_Click)
	#
	# buttonCredential
	#
	$buttonCredential.Location = '118, 9'
	$buttonCredential.Name = "buttonCredential"
	$buttonCredential.Size = '67, 23'
	$buttonCredential.TabIndex = 0
	$buttonCredential.Text = "Credential"
	$buttonCredential.UseVisualStyleBackColor = $True
	$buttonCredential.add_Click($buttonCredential_Click)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formLazyWinAdmincom.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formLazyWinAdmincom.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formLazyWinAdmincom.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formLazyWinAdmincom.ShowDialog()

} #End Function

#Call OnApplicationLoad to initialize
if((OnApplicationLoad) -eq $true)
{
	#Call the form
	Call-PowerShellStudio2012-ToolMaking-OutGridView_pff | Out-Null
	#Perform cleanup
	OnApplicationExit
}
